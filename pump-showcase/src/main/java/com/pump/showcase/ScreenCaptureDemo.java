/**
 * This software is released as part of the Pumpernickel project.
 * 
 * All com.pump resources in the Pumpernickel project are distributed under the
 * MIT License:
 * https://raw.githubusercontent.com/mickleness/pumpernickel/master/License.txt
 * 
 * More information about the Pumpernickel project is available here:
 * https://mickleness.github.io/pumpernickel/
 */
package com.pump.showcase;

import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;

import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.JTextPane;
import javax.swing.JToggleButton;
import javax.swing.ProgressMonitor;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.pump.UserCancelledException;
import com.pump.animation.AnimationReader;
import com.pump.animation.capture.RobotScreenCapture;
import com.pump.animation.capture.ScreenCapture;
import com.pump.animation.quicktime.JPEGMovWriter;
import com.pump.blog.ResourceSample;
import com.pump.io.SuffixFilenameFilter;

/**
 * A demo application for the {@link ScreenCapture} class.
 * 
 * <!-- ======== START OF AUTOGENERATED SAMPLES ======== -->
 * <p>
 * <img src=
 * "https://raw.githubusercontent.com/mickleness/pumpernickel/master/pump-release/resources/samples/ScreenCaptureDemo/sample.png"
 * alt="new&#160;com.bric.capture.ScreenCaptureDemo()"> <!-- ======== END OF
 * AUTOGENERATED SAMPLES ======== -->
 */
@ResourceSample(sample = "new com.bric.capture.ScreenCaptureDemo()")
public class ScreenCaptureDemo extends JPanel {
	private static final long serialVersionUID = 1L;

	JToggleButton recordButton = new JToggleButton("Record");
	JComboBox<String> comboBox = new JComboBox<String>();
	JProgressBar progressBar1 = new JProgressBar();
	JProgressBar progressBar2 = new JProgressBar();
	JSpinner spinner = new JSpinner(new SpinnerNumberModel(0, 0, 100, 5));
	JFrame frame;

	public ScreenCaptureDemo(JFrame frame) {
		this.frame = frame;

		setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0;
		c.gridy = 0;
		c.insets = new Insets(5, 5, 5, 5);
		c.gridwidth = GridBagConstraints.REMAINDER;
		add(recordButton, c);
		c.gridy++;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 1;
		add(new JSeparator(), c);
		c.gridy++;
		c.gridwidth = 1;
		c.fill = GridBagConstraints.NONE;
		progressBar1.setIndeterminate(true);
		add(progressBar1, c);

		c.gridy++;
		add(progressBar2, c);
		c.gridy++;
		add(spinner, c);
		ChangeListener changeListener = new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				int value = ((Number) spinner.getValue()).intValue();
				progressBar2.setValue(value);
			}
		};
		spinner.addChangeListener(changeListener);

		comboBox.addItem("Item 1");
		comboBox.addItem("Item 2");
		comboBox.addItem("Item 3");
		comboBox.setToolTipText("my tip!");

		c.gridy++;
		add(comboBox, c);
		c.gridy++;
		add(new JToggleButton("Toggle Me"), c);
		c.gridy++;
		c.anchor = GridBagConstraints.NORTH;
		add(new JSlider(), c);

		c.gridy = 2;
		c.gridx = 1;
		c.weightx = 1;
		c.weighty = 1;
		c.fill = GridBagConstraints.BOTH;
		c.gridheight = GridBagConstraints.REMAINDER;

		JTextPane textPane = new JTextPane();
		textPane.setText("This window contains random GUI widgets.  Press the \"Record\" button to begin capturing video, and then interact with the widgets.  Press \"Stop\" when finished.  Be careful!  This program records mouse movements, so a LOT of frames are created.  Don't record too long!  The encoding process is pretty slow.");
		JScrollPane scrollPane = new JScrollPane(textPane);
		scrollPane.setPreferredSize(new Dimension(220, 100));
		add(scrollPane, c);

		recordButton.addActionListener(new ActionListener() {
			ScreenCapture capture;

			public void actionPerformed(ActionEvent e) {
				if (capture == null) {
					try {
						capture = new RobotScreenCapture(
								ScreenCaptureDemo.this.frame.getBounds());
						capture.start();
						recordButton.setText("Stop");
					} catch (Exception e2) {
						e2.printStackTrace();
						recordButton.setSelected(false);
					}
				} else {
					AnimationReader r = capture.stop(false);
					File file = showSaveDialog();
					write(r, file);
					recordButton.setText("Record");
					capture = null;
				}
			}

			protected void write(final AnimationReader r, final File movFile) {
				final ProgressMonitor monitor = new ProgressMonitor(
						ScreenCaptureDemo.this, "Writing Movie", "", 0, 1);
				monitor.setMillisToPopup(5);
				Thread thread = new Thread() {
					@Override
					public void run() {
						try {
							write(r, movFile, monitor);
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				};
				thread.start();
			}

			protected void write(AnimationReader r, File movFile,
					ProgressMonitor monitor) throws IOException {
				JPEGMovWriter anim = new JPEGMovWriter(movFile);
				try {
					anim.addFrames(r, monitor);
				} finally {
					anim.close(true);
				}
			}
		});
	}

	protected File showSaveDialog() {
		FileDialog fd = new FileDialog(frame);
		fd.setMode(FileDialog.SAVE);
		fd.setFilenameFilter(new SuffixFilenameFilter("mov"));
		fd.setTitle("Save MOV File");
		fd.pack();
		fd.setLocationRelativeTo(frame);
		fd.setVisible(true);
		if (fd.getFile() == null)
			throw new UserCancelledException();
		String filepath = fd.getDirectory() + fd.getFile();
		if (!filepath.toLowerCase().endsWith(".mov")) {
			filepath += ".mov";
		}
		return new File(filepath);
	}
}