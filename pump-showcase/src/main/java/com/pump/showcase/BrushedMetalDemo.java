/**
 * This software is released as part of the Pumpernickel project.
 * 
 * All com.pump resources in the Pumpernickel project are distributed under the
 * MIT License:
 * https://raw.githubusercontent.com/mickleness/pumpernickel/master/License.txt
 * 
 * More information about the Pumpernickel project is available here:
 * https://mickleness.github.io/pumpernickel/
 */
package com.pump.showcase;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.TexturePaint;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.pump.blog.Blurb;
import com.pump.blog.ResourceSample;
import com.pump.image.BrushedMetalLook;
import com.pump.swing.ColorWell;

/**
 *
 * 
 * <!-- ======== START OF AUTOGENERATED SAMPLES ======== -->
 * <p><img src="https://raw.githubusercontent.com/mickleness/pumpernickel/master/pump-release/resources/samples/BrushedMetalDemo/sample.png" alt="new&#160;com.bric.image.BrushedMetalDemo(&#160;)">
 * <!-- ======== END OF AUTOGENERATED SAMPLES ======== -->
 */
@Blurb (
filename = "BrushedMetal",
title = "Brushed Metal",
releaseDate = "TBA",
summary = "The <a href=\"https://javagraphics.java.net/doc/com/bric/image/BrushedMetalLook.html\">BrushedMetalLook</a> class provides a few static methods to create BufferedImages "
		+ "that resemble brushed metal.",
scrapped = "This is an increasingly rare/obsolete look.",
sandboxDemo = true
)
@ResourceSample( sample="new com.bric.image.BrushedMetalDemo( )" )
public class BrushedMetalDemo extends JPanel {
	private static final long serialVersionUID = 1L;

	JLabel label = new JLabel("Color:");
	ColorWell colorWell = new ColorWell(true);
	JTabbedPane tabs = new JTabbedPane();
	TexturePaint texturePaint;
	JComponent tilingComponent = new JComponent() {
		private static final long serialVersionUID = 1L;

		@Override
		protected void paintComponent(Graphics g) {
			super.paintComponent(g);
			
			if(texturePaint!=null) {
				Graphics2D g2 = (Graphics2D)g;
				g2.setPaint(texturePaint);
				g2.fillRect(0, 0, getWidth(), getHeight());
			}
		}
	};
	JLabel label1 = new JLabel();
	JLabel label2 = new JLabel();
	JLabel label3 = new JLabel();
	
	BrushedMetalDemo() {
		setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		c.gridx = 0; c.gridy = 0;
		c.weightx = 1; c.weighty = 0;
		c.insets = new Insets(3,3,3,3);
		c.anchor = GridBagConstraints.EAST;
		add(label, c);
		c.gridx++;
		c.anchor = GridBagConstraints.WEST;
		add(colorWell, c);
		c.gridy++; c.gridwidth = GridBagConstraints.REMAINDER; c.gridx = 0;
		c.weighty = 1;
		c.anchor = GridBagConstraints.CENTER;
		add(tabs, c);
		
		colorWell.addChangeListener(new ChangeListener() {
			@Override
			public void stateChanged(ChangeEvent e) {
				setMetalColor(colorWell.getColor());
			}
		});
		
		colorWell.setColor(new Color(0x8888899));
		
		tabs.add(tilingComponent, "Tiled Pattern");
		tabs.add(label1, "Ellipse");
		tabs.add(label2, "Line 1");
		tabs.add(label3, "Line 2");
	}
	
	protected void setMetalColor(Color c) {
		BufferedImage image = BrushedMetalLook.getImage(c);
		texturePaint = new TexturePaint(image, new Rectangle(0,0,image.getWidth(),image.getHeight()));
		
		Shape shape = new Ellipse2D.Float(100,100,400,400);
		image = BrushedMetalLook.paint(shape, 20, null, c, true);
		Icon icon1 = new ImageIcon(image);
		label1.setIcon(icon1);
		
		shape = new Line2D.Float(100,100,500,500);
		image = BrushedMetalLook.paint(shape, 20, null, c, true);
		ImageIcon icon2 = new ImageIcon(image);
		label2.setIcon(icon2);

		shape = new Line2D.Float(100,500,500,100);
		image = BrushedMetalLook.paint(shape, 20, null, c, true);
		ImageIcon icon3 = new ImageIcon(image);
		label3.setIcon(icon3);
		
		tabs.repaint();
	}
}